#********************************************************************
# Wrapper License Properties (Ignored by Community Edition)
#********************************************************************
# Professional and Standard Editions of the Wrapper require a valid
#  License Key to start.  Licenses can be purchased or a trial license
#  requested on the following pages:
# http://wrapper.tanukisoftware.org/purchase
# http://wrapper.tanukisoftware.org/trialfzfz

# Include file problems can be debugged by removing the first '#'
#  from the following line:
##include.debug

# The Wrapper will look for either of the following optional files for a
#  valid License Key.  License Key properties can optionally be included
#  directly in this configuration file.
#include ../conf/wrapper-license.conf
#include ../conf/wrapper-license-%WRAPPER_HOST_NAME%.conf

# The following property will output information about which License Key(s)
#  are being found, and can aid in resolving any licensing problems.
#wrapper.license.debug=TRUE

#********************************************************************
# Wrapper Java Properties
#********************************************************************
# Java Application
wrapper.java.command=/opt/java/jdk1.8.0_131/bin/java
# Tell the Wrapper to log the full generated Java command line.
#wrapper.java.command.loglevel=INFO

# Java Main class.  This class must implement the WrapperListener interface
#  or guarantee that the WrapperManager class is initialized.  Helper
#  classes are provided to do this for you.  See the Integration section
#  of the documentation for details.
 #wrapper.java.mainclass=org.tanukisoftware.wrapper.WrapperSimpleApp
wrapper.java.mainclass=com.epic.line.service.core.ServiceAsBackground




# Java Classpath (include wrapper.jar)  Add class path elements as
#  needed starting from 1
wrapper.java.classpath.1=/opt/epicline/lib/epictle.jar
wrapper.java.classpath.2=/opt/epicline/sconfig/wconf/wrapper.jar



# Java Library Path (location of Wrapper.DLL or libwrapper.so)
wrapper.java.library.path.1=/opt/epicline/sconfig/wconf
wrapper.java.library.path.2=/lib


# Java Bits.  On applicable platforms, tells the JVM to run in 32 or 64-bit mode.
# wrapper.java.additional.auto_bits=TRUE

# Java Additional Parameters
# wrapper.java.additional.1=-Dorg.tanukisoftware.wrapper.WrapperSimpleApp.waitForStartMain=TRUE



# Initial Java Heap Size (in MB)
wrapper.java.initmemory=1000

# Maximum Java Heap Size (in MB)
wrapper.java.maxmemory=1300

# Application parameters.  Add parameters as needed starting from 1
wrapper.app.parameter.2=com.epic.line.service.core.ServiceAsOnDemand
wrapper.app.parameter.3=/opt/epicline/
#********************************************************************
# Wrapper Logging Properties
#********************************************************************
# Enables Debug output from the Wrapper.
# wrapper.debug=TRUE

# Format of output for the console.  (See docs for formats)
wrapper.console.format=ZM

# Log Level for console output.  (See docs for log levels)
wrapper.console.loglevel=INFO

# Log file to use for wrapper output logging.
wrapper.logfile=/opt/epicline/logs/DEBUG.TXT

# Format of output for the log file.  (See docs for formats)
wrapper.logfile.format=ZM

# Log Level for log file output.  (See docs for log levels)
wrapper.logfile.loglevel=INFO

# Maximum size that the log file will be allowed to grow to before
#  the log is rolled. Size is specified in bytes.  The default value
#  of 0, disables log rolling.  May abbreviate with the 'k' (kb) or
#  'm' (mb) suffix.  For example: 10m = 10 megabytes.
wrapper.logfile.maxsize=1000m

# Maximum number of rolled log files which will be allowed before old
#  files are deleted.  The default value of 0 implies no limit.
wrapper.logfile.maxfiles=10

# Log Level for sys/event log output.  (See docs for log levels)
wrapper.syslog.loglevel=NONE

#********************************************************************
# Wrapper General Properties
#********************************************************************
# Allow for the use of non-contiguous numbered properties
wrapper.ignore_sequence_gaps=TRUE

# Title to use when running as a console
wrapper.console.title=Epic-TLE-V5 Server 

#********************************************************************
# Wrapper JVM Checks
#********************************************************************
# Detect DeadLocked Threads in the JVM. (Requires Standard Edition)
wrapper.check.deadlock=TRUE
wrapper.check.deadlock.interval=60
wrapper.check.deadlock.action=RESTART
wrapper.check.deadlock.output=FULL

# Out Of Memory detection.
wrapper.filter.trigger.1000=java.lang.OutOfMemoryError
wrapper.filter.action.1000=RESTART
wrapper.filter.message.1000=The JVM has run out of memory.

#********************************************************************
# Wrapper Email Notifications. (Requires Professional Edition)
#********************************************************************
# Common Event Email settings.
#wrapper.event.default.email.debug=TRUE
#wrapper.event.default.email.smtp.host=<SMTP_Host>
#wrapper.event.default.email.smtp.port=25
#wrapper.event.default.email.subject=[%WRAPPER_HOSTNAME%:%WRAPPER_NAME%:%WRAPPER_EVENT_NAME%] Event Notification
#wrapper.event.default.email.sender=<Sender email>
#wrapper.event.default.email.recipient=<Recipient email>

# Configure the log attached to event emails.
#wrapper.event.default.email.attach_log=TRUE
#wrapper.event.default.email.maillog.lines=50
#wrapper.event.default.email.maillog.format=LPTM
#wrapper.event.default.email.maillog.loglevel=INFO

# Enable specific event emails.
#wrapper.event.wrapper_start.email=TRUE
#wrapper.event.jvm_prelaunch.email=TRUE
#wrapper.event.jvm_start.email=TRUE
#wrapper.event.jvm_started.email=TRUE
#wrapper.event.jvm_stop.email=TRUE
#wrapper.event.jvm_stopped.email=TRUE
#wrapper.event.jvm_restart.email=TRUE
#wrapper.event.jvm_failed_invocation.email=TRUE
#wrapper.event.jvm_max_failed_invocations.email=TRUE
#wrapper.event.jvm_kill.email=TRUE
#wrapper.event.jvm_killed.email=TRUE
#wrapper.event.jvm_unexpected_exit.email=TRUE
#wrapper.event.wrapper_stop.email=TRUE

# Specify custom mail content
wrapper.event.jvm_restart.email.body=The JVM was restarted.\n\nPlease check on its status.\n

#********************************************************************
# Wrapper Windows NT/2000/XP Service Properties
#********************************************************************
# WARNING - Do not modify any of these properties when an application
#  using this configuration file has been installed as a service.
#  Please uninstall the service before modifying this section.  The
#  service can then be reinstalled.

# Name of the service
wrapper.name=testwrapper

# Display name of the service
wrapper.displayname=Test Wrapper Sample Application

# Description of the service
wrapper.description=Test Wrapper Sample Application Description

# Service dependencies.  Add dependencies as needed starting from 1
wrapper.ntservice.dependency.1=

# Mode in which the service is installed.  AUTO_START, DELAY_START or DEMAND_START
wrapper.ntservice.starttype=DEMAND_START

# Allow the service to interact with the desktop.
wrapper.ntservice.interactive=false



#********************************************************************
# Wrapper Restart Properties
#********************************************************************

# Controls whether or not the Wrapper configuration file will be
# reloaded in the event of a JVM restart.   (default: FALSE)
wrapper.restart.reload_configuration=TRUE

# Controls the number of seconds to pause between a JVM exiting for
# any reason, and a new JVM being launched.   (default: 5)
wrapper.restart.delay=3

# Maximum number of times that the Wrapper will attempt to restart
# the JVM if each attempted invocation exits abnormally or is
# restarted shortly after having being launched.   (default: 5)
#
# If the JVM was running for a period longer than the value set in
# the wrapper.successful_invocation_time  property, then the restart
# count will be reset to 0. So this count only applies to JVM
# invocations which fail on startup.
wrapper.max_failed_invocations=2

# Specifies the amount of time that an application must remain
# running before it will be considered to have been a successful
# invocation.   (default: 300)
wrapper.successful_invocation_time=300

# This property makes it possible to control whether or not multiple
# invocations of a given application can be run at the same time.
# (default: FALSE)
wrapper.single_invocation=FALSE



#********************************************************************
# Wrapper Shutdown and Watchdog settings
#********************************************************************




#wrapper.startup.delay=10
#wrapper.startup.delay.console=0
#wrapper.startup.delay.service=10

#wrapper.jvm_exit.timeout=2

#wrapper.filter.trigger.1=java.lang.OutOfMemoryError
#wrapper.filter.action.1=RESTART

#wrapper.on_exit.default=RESTART
#wrapper.on_exit.99=SHUTDOWN
#wrapper.on_exit.98=SHUTDOWN
#wrapper.on_exit.50=SHUTDOWN
#wrapper.on_exit.54=SHUTDOWN

#wrapper.request_thread_dump_on_failed_jvm_exit=FALSE
#wrapper.disable_shutdown_hook=FALSE


