package com.epic.tle.mapping;
// Generated Jun 1, 2017 10:53:15 AM by Hibernate Tools 4.3.1

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import static javax.persistence.GenerationType.IDENTITY;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.Table;
import javax.persistence.UniqueConstraint;
import org.hibernate.annotations.GenericGenerator;
import org.hibernate.annotations.Parameter;

/**
 * EpicTleChannel generated by hbm2java
 */
@Entity
@Table(name = "EPIC_TLE_CHANNEL"
//        , catalog = "epictle_v5ch"
        , uniqueConstraints = @UniqueConstraint(columnNames = "CHANNEL_NAME")
)
public class EpicTleChannel implements java.io.Serializable {

    private Integer channelId;
    private EpicTleChannelOperationMethod epicTleChannelOperationMethod;
    private EpicTleForwardmethod epicTleForwardmethod;
    private EpicTleHeaderFormats epicTleHeaderFormats;
    private EpicTleHeaderSize epicTleHeaderSize;
    private EpicTleStatus epicTleStatusByTpduStatus;
    private EpicTleStatus epicTleStatusByStatus;
    private EpicTleStatus epicTleStatusByKeepAliveStatus;
    private EpicTleStatus epicTleStatusByBindStatus;
    private EpicTleStatus epicTleStatusByLoadbalancestatus;
    private EpicTleStatus epicTleStatusByBindSecondaryStatus;
    private EpicTleStatus epicTleStatusByPintranslateStatus;
    private String hostip="127.0.0.1";
    private Integer hostport=0;
    private Integer conTimeout=0;
    private Integer readTimeout=0;
    private Integer assignStatus=0;
    private Integer connectedtype=1;
    private String channelName;
    private String secondaryIp="127.0.0.1";
    private String secondaryPort="0";
    private String isoFile;
    private String encryptZpk="10101010101010101010101010101010";
    private String zpkKvc="101010";
    private EpicTleNodetype epicTleNodetype;

    public EpicTleChannel() {
    }

    public EpicTleChannel(EpicTleForwardmethod epicTleForwardmethod, EpicTleStatus epicTleStatusByStatus, EpicTleStatus epicTleStatusByBindStatus) {
        this.epicTleForwardmethod = epicTleForwardmethod;
        this.epicTleStatusByStatus = epicTleStatusByStatus;
        this.epicTleStatusByBindStatus = epicTleStatusByBindStatus;
    }

    public EpicTleChannel(EpicTleChannelOperationMethod epicTleChannelOperationMethod, EpicTleForwardmethod epicTleForwardmethod, EpicTleHeaderFormats epicTleHeaderFormats, EpicTleHeaderSize epicTleHeaderSize, EpicTleStatus epicTleStatusByTpduStatus, EpicTleStatus epicTleStatusByStatus, EpicTleStatus epicTleStatusByKeepAliveStatus, EpicTleStatus epicTleStatusByBindStatus, EpicTleStatus epicTleStatusByLoadbalancestatus, EpicTleStatus epicTleStatusByBindSecondaryStatus, EpicTleStatus epicTleStatusByPintranslateStatus, String hostip, Integer hostport, Integer conTimeout, Integer readTimeout, Integer assignStatus, Integer connectedtype, String channelName, String secondaryIp, String secondaryPort, String isoFile, String encryptZpk, String zpkKvc) {
        this.epicTleChannelOperationMethod = epicTleChannelOperationMethod;
        this.epicTleForwardmethod = epicTleForwardmethod;
        this.epicTleHeaderFormats = epicTleHeaderFormats;
        this.epicTleHeaderSize = epicTleHeaderSize;
        this.epicTleStatusByTpduStatus = epicTleStatusByTpduStatus;
        this.epicTleStatusByStatus = epicTleStatusByStatus;
        this.epicTleStatusByKeepAliveStatus = epicTleStatusByKeepAliveStatus;
        this.epicTleStatusByBindStatus = epicTleStatusByBindStatus;
        this.epicTleStatusByLoadbalancestatus = epicTleStatusByLoadbalancestatus;
        this.epicTleStatusByBindSecondaryStatus = epicTleStatusByBindSecondaryStatus;
        this.epicTleStatusByPintranslateStatus = epicTleStatusByPintranslateStatus;
        this.hostip = hostip;
        this.hostport = hostport;
        this.conTimeout = conTimeout;
        this.readTimeout = readTimeout;
        this.assignStatus = assignStatus;
        this.connectedtype = connectedtype;
        this.channelName = channelName;
        this.secondaryIp = secondaryIp;
        this.secondaryPort = secondaryPort;
        this.isoFile = isoFile;
        this.encryptZpk = encryptZpk;
        this.zpkKvc = zpkKvc;
    }

    @Id
    @GenericGenerator(name = "id_generator", strategy = "com.epic.tle.util.IdGenerator", parameters= {@Parameter(name="columnPram", value = "channelId")})
    @GeneratedValue(generator = "id_generator")  
    @Column(name = "CHANNEL_ID", unique = true, nullable = false)
    public Integer getChannelId() {
        return this.channelId;
    }

    public void setChannelId(Integer channelId) {
        this.channelId = channelId;
    }

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "OPERATION_METHOD")
    public EpicTleChannelOperationMethod getEpicTleChannelOperationMethod() {
        return this.epicTleChannelOperationMethod;
    }

    public void setEpicTleChannelOperationMethod(EpicTleChannelOperationMethod epicTleChannelOperationMethod) {
        this.epicTleChannelOperationMethod = epicTleChannelOperationMethod;
    }

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "ROUTMETHOD", nullable = false)
    public EpicTleForwardmethod getEpicTleForwardmethod() {
        return this.epicTleForwardmethod;
    }

    public void setEpicTleForwardmethod(EpicTleForwardmethod epicTleForwardmethod) {
        this.epicTleForwardmethod = epicTleForwardmethod;
    }
    
    @ManyToOne(fetch=FetchType.LAZY)
    @JoinColumn(name="NODE", nullable=false)
    public EpicTleNodetype getEpicTleNodetype() {
        return this.epicTleNodetype;
    }
    
    public void setEpicTleNodetype(EpicTleNodetype epicTleNodetype) {
        this.epicTleNodetype = epicTleNodetype;
    }

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "HEADER_FORMAT")
    public EpicTleHeaderFormats getEpicTleHeaderFormats() {
        return this.epicTleHeaderFormats;
    }

    public void setEpicTleHeaderFormats(EpicTleHeaderFormats epicTleHeaderFormats) {
        this.epicTleHeaderFormats = epicTleHeaderFormats;
    }

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "HEADER_SIZE")
    public EpicTleHeaderSize getEpicTleHeaderSize() {
        return this.epicTleHeaderSize;
    }

    public void setEpicTleHeaderSize(EpicTleHeaderSize epicTleHeaderSize) {
        this.epicTleHeaderSize = epicTleHeaderSize;
    }

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "TPDU_STATUS")
    public EpicTleStatus getEpicTleStatusByTpduStatus() {
        return this.epicTleStatusByTpduStatus;
    }

    public void setEpicTleStatusByTpduStatus(EpicTleStatus epicTleStatusByTpduStatus) {
        this.epicTleStatusByTpduStatus = epicTleStatusByTpduStatus;
    }

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "STATUS", nullable = false)
    public EpicTleStatus getEpicTleStatusByStatus() {
        return this.epicTleStatusByStatus;
    }

    public void setEpicTleStatusByStatus(EpicTleStatus epicTleStatusByStatus) {
        this.epicTleStatusByStatus = epicTleStatusByStatus;
    }

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "KEEP_ALIVE_STATUS")
    public EpicTleStatus getEpicTleStatusByKeepAliveStatus() {
        return this.epicTleStatusByKeepAliveStatus;
    }

    public void setEpicTleStatusByKeepAliveStatus(EpicTleStatus epicTleStatusByKeepAliveStatus) {
        this.epicTleStatusByKeepAliveStatus = epicTleStatusByKeepAliveStatus;
    }

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "BIND_STATUS", nullable = false)
    public EpicTleStatus getEpicTleStatusByBindStatus() {
        return this.epicTleStatusByBindStatus;
    }

    public void setEpicTleStatusByBindStatus(EpicTleStatus epicTleStatusByBindStatus) {
        this.epicTleStatusByBindStatus = epicTleStatusByBindStatus;
    }

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "LOADBALANCESTATUS")
    public EpicTleStatus getEpicTleStatusByLoadbalancestatus() {
        return this.epicTleStatusByLoadbalancestatus;
    }

    public void setEpicTleStatusByLoadbalancestatus(EpicTleStatus epicTleStatusByLoadbalancestatus) {
        this.epicTleStatusByLoadbalancestatus = epicTleStatusByLoadbalancestatus;
    }

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "BIND_SECONDARY_STATUS")
    public EpicTleStatus getEpicTleStatusByBindSecondaryStatus() {
        return this.epicTleStatusByBindSecondaryStatus;
    }

    public void setEpicTleStatusByBindSecondaryStatus(EpicTleStatus epicTleStatusByBindSecondaryStatus) {
        this.epicTleStatusByBindSecondaryStatus = epicTleStatusByBindSecondaryStatus;
    }

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "PINTRANSLATE_STATUS")
    public EpicTleStatus getEpicTleStatusByPintranslateStatus() {
        return this.epicTleStatusByPintranslateStatus;
    }

    public void setEpicTleStatusByPintranslateStatus(EpicTleStatus epicTleStatusByPintranslateStatus) {
        this.epicTleStatusByPintranslateStatus = epicTleStatusByPintranslateStatus;
    }

    @Column(name = "HOSTIP", length = 15)
    public String getHostip() {
        return this.hostip;
    }

    public void setHostip(String hostip) {
        this.hostip = hostip;
    }

    @Column(name = "HOSTPORT")
    public Integer getHostport() {
        return this.hostport;
    }

    public void setHostport(Integer hostport) {
        this.hostport = hostport;
    }

    @Column(name = "CON_TIMEOUT")
    public Integer getConTimeout() {
        return this.conTimeout;
    }

    public void setConTimeout(Integer conTimeout) {
        this.conTimeout = conTimeout;
    }

    @Column(name = "READ_TIMEOUT")
    public Integer getReadTimeout() {
        return this.readTimeout;
    }

    public void setReadTimeout(Integer readTimeout) {
        this.readTimeout = readTimeout;
    }

    @Column(name = "ASSIGN_STATUS")
    public Integer getAssignStatus() {
        return this.assignStatus;
    }

    public void setAssignStatus(Integer assignStatus) {
        this.assignStatus = assignStatus;
    }

    @Column(name = "CONNECTEDTYPE")
    public Integer getConnectedtype() {
        return this.connectedtype;
    }

    public void setConnectedtype(Integer connectedtype) {
        this.connectedtype = connectedtype;
    }

    @Column(name = "CHANNEL_NAME")
    public String getChannelName() {
        return this.channelName;
    }

    public void setChannelName(String channelName) {
        this.channelName = channelName;
    }

    @Column(name = "SECONDARY_IP", length = 45)
    public String getSecondaryIp() {
        return this.secondaryIp;
    }

    public void setSecondaryIp(String secondaryIp) {
        this.secondaryIp = secondaryIp;
    }

    @Column(name = "SECONDARY_PORT", length = 45)
    public String getSecondaryPort() {
        return this.secondaryPort;
    }

    public void setSecondaryPort(String secondaryPort) {
        this.secondaryPort = secondaryPort;
    }

    @Column(name = "ISO_FILE", length = 45)
    public String getIsoFile() {
        return this.isoFile;
    }

    public void setIsoFile(String isoFile) {
        this.isoFile = isoFile;
    }

    @Column(name = "ENCRYPT_ZPK", length = 32)
    public String getEncryptZpk() {
        return this.encryptZpk;
    }

    public void setEncryptZpk(String encryptZpk) {
        this.encryptZpk = encryptZpk;
    }

    @Column(name = "ZPK_KVC", length = 6)
    public String getZpkKvc() {
        return this.zpkKvc;
    }

    public void setZpkKvc(String zpkKvc) {
        this.zpkKvc = zpkKvc;
    }

    @Override
    public String toString() {
        try{
            return "{" + "channelId:" + channelId + ", epicTleChannelOperationMethod:" + epicTleChannelOperationMethod.getCode() + ", epicTleForwardmethod:" + epicTleForwardmethod.getCode() + ", epicTleHeaderFormats:" + epicTleHeaderFormats.getCode() + ", epicTleHeaderSize:" + epicTleHeaderSize.getCode() + ", epicTleStatusByTpduStatus:" + epicTleStatusByTpduStatus.getCode() + ", epicTleStatusByStatus:" + epicTleStatusByStatus.getCode() + ", epicTleStatusByKeepAliveStatus:" + epicTleStatusByKeepAliveStatus.getCode() + ", epicTleStatusByBindStatus:" + epicTleStatusByBindStatus.getCode() + ", epicTleStatusByLoadbalancestatus:" + epicTleStatusByLoadbalancestatus.getCode() + ", epicTleStatusByBindSecondaryStatus:" + epicTleStatusByBindSecondaryStatus.getCode() + ", epicTleStatusByPintranslateStatus:" + epicTleStatusByPintranslateStatus.getCode() + ", hostip:" + hostip + ", hostport:" + hostport + ", conTimeout:" + conTimeout + ", readTimeout:" + readTimeout + ", assignStatus:" + assignStatus + ", connectedtype:" + connectedtype + ", channelName:" + channelName + ", secondaryIp:" + secondaryIp + ", secondaryPort:" + secondaryPort + ", isoFile:" + isoFile + ", encryptZpk:" + encryptZpk + ", zpkKvc:" + zpkKvc + ", epicTleNodetype:" + epicTleNodetype.getCode() + '}';
        }
        catch(Exception e){
            return "{" + "channelId:" + channelId + ", hostip:" + hostip + ", hostport:" + hostport + ", conTimeout:" + conTimeout + ", readTimeout:" + readTimeout + ", assignStatus:" + assignStatus + ", connectedtype:" + connectedtype + ", channelName:" + channelName + ", secondaryIp:" + secondaryIp + ", secondaryPort:" + secondaryPort + ", isoFile:" + isoFile + ", encryptZpk:" + encryptZpk + ", zpkKvc:" + zpkKvc  + '}';
        }
    
    }
    
    public String forHistory() {
        try{
            return "{" + "Channel Id:" + channelId + ", Channel Operation Method:" + epicTleChannelOperationMethod.getCode() + ", Forward Method:" + epicTleForwardmethod.getCode() + ", Header Formats:" + epicTleHeaderFormats.getCode() + ", Header Size:" + epicTleHeaderSize.getCode() + ", Status ByTpduStatus:" + epicTleStatusByTpduStatus.getCode() + ", Status:" + epicTleStatusByStatus.getCode() + ", Keep Alive Status:" + epicTleStatusByKeepAliveStatus.getCode() + ", Bind Status:" + epicTleStatusByBindStatus.getCode() + ", Loadbalance Status:" + epicTleStatusByLoadbalancestatus.getCode() + ", Secondary Status:" + epicTleStatusByBindSecondaryStatus.getCode() + ", Pin Translate Status:" + epicTleStatusByPintranslateStatus.getCode() + ", Host Ip:" + hostip + ", Host Port:" + hostport + ", Connection Timeout:" + conTimeout + ", Read Timeout:" + readTimeout + ", Assign Status:" + assignStatus + ", Connected Type:" + connectedtype + ", ChannelName:" + channelName + ", Secondary Ip:" + secondaryIp + ", Secondary Port:" + secondaryPort + ", ISO File:" + isoFile + ", Encrypt ZPK:" + encryptZpk + ", ZPK KVC:" + zpkKvc + ", Node type:" + epicTleNodetype.getCode() + '}';
        }
        catch(Exception e){
            return "{" + "Channel Id:" + channelId + ", Host ip:" + hostip + ", Host port:" + hostport + ", Connection Timeout:" + conTimeout + ", Read Timeout:" + readTimeout + ", Assign Status:" + assignStatus + ", Connected Type:" + connectedtype + ", Channel Name:" + channelName + ", Secondary Ip:" + secondaryIp + ", Secondary Port:" + secondaryPort + ", ISO File:" + isoFile + ", Encrypt ZPK:" + encryptZpk + ", ZPK KVC:" + zpkKvc  + '}';
        }
    
    }
    

}
