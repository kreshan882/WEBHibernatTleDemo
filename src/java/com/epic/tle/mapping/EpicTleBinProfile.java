package com.epic.tle.mapping;
// Generated May 31, 2017 9:39:12 AM by Hibernate Tools 4.3.1


import java.util.Date;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Set;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import static javax.persistence.GenerationType.IDENTITY;
import javax.persistence.Id;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import org.hibernate.annotations.GenericGenerator;
import org.hibernate.annotations.Parameter;

/**
 * EpicTleBinProfile generated by hbm2java
 */
@Entity
@Table(name="EPIC_TLE_BIN_PROFILE"
//    ,catalog="epictle_v5ch"
)
public class EpicTleBinProfile  implements java.io.Serializable {


     private Integer id;
     private String description;
     private Date datetime;
     private Integer status;
     private Set<EpicTleBlockBin> epicTleBlockBins = new HashSet<EpicTleBlockBin>(0);
     private Set<EpicTleTerminal> epicTleTerminals = new HashSet<EpicTleTerminal>(0);

    public EpicTleBinProfile() {
    }

	
    public EpicTleBinProfile(Date datetime) {
        this.datetime = datetime;
    }
    public EpicTleBinProfile(String description, Date datetime, Integer status, Set<EpicTleBlockBin> epicTleBlockBins, Set<EpicTleTerminal> epicTleTerminals) {
       this.description = description;
       this.datetime = datetime;
       this.status = status;
       this.epicTleBlockBins = epicTleBlockBins;
       this.epicTleTerminals = epicTleTerminals;
    }
   
    @Id
    @GenericGenerator(name = "id_generator", strategy = "com.epic.tle.util.IdGenerator", parameters= {@Parameter(name="columnPram", value = "id")})
    @GeneratedValue(generator = "id_generator")  
    @Column(name="ID", unique=true, nullable=false)
    public Integer getId() {
        return this.id;
    }
    
    public void setId(Integer id) {
        this.id = id;
    }

    
    @Column(name="DESCRIPTION", length=100)
    public String getDescription() {
        return this.description;
    }
    
    public void setDescription(String description) {
        this.description = description;
    }

    @Temporal(TemporalType.TIMESTAMP)
    @Column(name="DATETIME", nullable=false, length=19)
    public Date getDatetime() {
        return this.datetime;
    }
    
    public void setDatetime(Date datetime) {
        this.datetime = datetime;
    }

    
    @Column(name="STATUS")
    public Integer getStatus() {
        return this.status;
    }
    
    public void setStatus(Integer status) {
        this.status = status;
    }

@OneToMany(fetch=FetchType.LAZY, mappedBy="epicTleBinProfile")
    public Set<EpicTleBlockBin> getEpicTleBlockBins() {
        return this.epicTleBlockBins;
    }
    
    public void setEpicTleBlockBins(Set<EpicTleBlockBin> epicTleBlockBins) {
        this.epicTleBlockBins = epicTleBlockBins;
    }

@OneToMany(fetch=FetchType.LAZY, mappedBy="epicTleBinProfile")
    public Set<EpicTleTerminal> getEpicTleTerminals() {
        return this.epicTleTerminals;
    }
    
    public void setEpicTleTerminals(Set<EpicTleTerminal> epicTleTerminals) {
        this.epicTleTerminals = epicTleTerminals;
    }

    @Override
    public String toString() {
        String s="{" + "Id:" + id + ", Description:" + description  + ", Status:" + status ;
        
        try{
            if(!epicTleBlockBins.isEmpty()){
                s+=", Block Bins :";
                Iterator<EpicTleBlockBin> it = epicTleBlockBins.iterator();
                while(it.hasNext()){
                    EpicTleBlockBin b=it.next();
                    s+=b.getId().getLow_value()+" - "+b.getId().getUpper_value()+" | ";
                }
                s=s.substring(0,s.length()-2);
            }

            if(!epicTleTerminals.isEmpty()){
                s+=", Terminals :";
                Iterator<EpicTleTerminal> it = epicTleTerminals.iterator();
                while(it.hasNext()){
                    EpicTleTerminal b=it.next();
                    s+=b.getTid()+" | ";
                }
                s=s.substring(0,s.length()-2);
            }
            s+="}";
        }
        catch(Exception e){
         s="{" + "Id:" + id + ", Description:" + description  + ", Status:" + status + '}';
        }
        return s;
    }

    public String forHistory() {
        
        String s="{" + "Id:" + id + ", Description:" + description  + ", Status:" + status + '}';
        
        try{
            if(!epicTleBlockBins.isEmpty()){
                s+=", Block Bins :";
                Iterator<EpicTleBlockBin> it = epicTleBlockBins.iterator();
                while(it.hasNext()){
                    EpicTleBlockBin b=it.next();
                    s+=b.getId()+" | ";
                }
            }

            if(!epicTleTerminals.isEmpty()){
                s+=", Terminals :";
                Iterator<EpicTleTerminal> it = epicTleTerminals.iterator();
                while(it.hasNext()){
                    EpicTleTerminal b=it.next();
                    s+=b.getTid()+" | ";
                }
            }
        }
        catch(Exception e){
         s="{" + "Id:" + id + ", Description:" + description  + ", Status:" + status + '}';
        }
        return s;
    }



}


