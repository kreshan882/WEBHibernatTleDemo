package com.epic.tle.mapping;
// Generated Jul 20, 2017 1:55:20 PM by Hibernate Tools 4.3.1

import java.util.Date;
import java.util.HashSet;
import java.util.Set;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import static javax.persistence.GenerationType.IDENTITY;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.persistence.UniqueConstraint;
import javax.persistence.Version;
import org.hibernate.annotations.GenericGenerator;
import org.hibernate.annotations.Parameter;

/**
 * EpicTleTerminalRefprofile generated by hbm2java
 */
@Entity
@Table(name = "EPIC_TLE_TERMINAL_RISK_PROFILE" //        , catalog = "epictle_v5ch"
        , uniqueConstraints = @UniqueConstraint(columnNames = "NAME")
)
public class EpicTleTerminalRefprofile implements java.io.Serializable {

    private Integer id;
    private Date timestamp;
    private EpicTleStatus epicTleStatusByFallBackStatus;
    private EpicTleStatus epicTleStatusByStatus;
    private EpicTleStatus epicTleStatusBySwipeTransStatus;
    private EpicTleStatus epicTleStatusByNfcTxnStatus;
    private EpicTleStatus epicTleStatusByPinTxnStatus;
    private String name;
    private int minAmount;
    private int maxAmount;
    private int oprHoursTo;
    private int oprHoursFrom;
    private Set<EpicTleTerminal> epicTleTerminals = new HashSet<EpicTleTerminal>(0);

    public EpicTleTerminalRefprofile() {
    }

    public EpicTleTerminalRefprofile(EpicTleStatus epicTleStatusByFallBackStatus, EpicTleStatus epicTleStatusBySwipeTransStatus, EpicTleStatus epicTleStatusByNfcTxnStatus, EpicTleStatus epicTleStatusByPinTxnStatus, String name, int minAmount, int maxAmount, int oprHoursTo, int oprHoursFrom) {
        this.epicTleStatusByFallBackStatus = epicTleStatusByFallBackStatus;
        this.epicTleStatusBySwipeTransStatus = epicTleStatusBySwipeTransStatus;
        this.epicTleStatusByNfcTxnStatus = epicTleStatusByNfcTxnStatus;
        this.epicTleStatusByPinTxnStatus = epicTleStatusByPinTxnStatus;
        this.name = name;
        this.minAmount = minAmount;
        this.maxAmount = maxAmount;
        this.oprHoursTo = oprHoursTo;
        this.oprHoursFrom = oprHoursFrom;
    }

    public EpicTleTerminalRefprofile(EpicTleStatus epicTleStatusByFallBackStatus, EpicTleStatus epicTleStatusByStatus, EpicTleStatus epicTleStatusBySwipeTransStatus, EpicTleStatus epicTleStatusByNfcTxnStatus, EpicTleStatus epicTleStatusByPinTxnStatus, String name, int minAmount, int maxAmount, int oprHoursTo, int oprHoursFrom, Set<EpicTleTerminal> epicTleTerminals) {
        this.epicTleStatusByFallBackStatus = epicTleStatusByFallBackStatus;
        this.epicTleStatusByStatus = epicTleStatusByStatus;
        this.epicTleStatusBySwipeTransStatus = epicTleStatusBySwipeTransStatus;
        this.epicTleStatusByNfcTxnStatus = epicTleStatusByNfcTxnStatus;
        this.epicTleStatusByPinTxnStatus = epicTleStatusByPinTxnStatus;
        this.name = name;
        this.minAmount = minAmount;
        this.maxAmount = maxAmount;
        this.oprHoursTo = oprHoursTo;
        this.oprHoursFrom = oprHoursFrom;
        this.epicTleTerminals = epicTleTerminals;
    }

    @Id
    @GenericGenerator(name = "id_generator", strategy = "com.epic.tle.util.IdGenerator", parameters= {@Parameter(name="columnPram", value = "id")})
    @GeneratedValue(generator = "id_generator")
    @Column(name = "ID", unique = true, nullable = false)
    public Integer getId() {
        return this.id;
    }

    public void setId(Integer id) {
        this.id = id;
    }

    @Version
    @Temporal(TemporalType.TIMESTAMP)
    @Column(name = "TIMESTAMP", nullable = false, length = 19)
    public Date getTimestamp() {
        return this.timestamp;
    }

    public void setTimestamp(Date timestamp) {
        this.timestamp = timestamp;
    }

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "FALL_BACK_STATUS", nullable = false)
    public EpicTleStatus getEpicTleStatusByFallBackStatus() {
        return this.epicTleStatusByFallBackStatus;
    }

    public void setEpicTleStatusByFallBackStatus(EpicTleStatus epicTleStatusByFallBackStatus) {
        this.epicTleStatusByFallBackStatus = epicTleStatusByFallBackStatus;
    }

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "STATUS")
    public EpicTleStatus getEpicTleStatusByStatus() {
        return this.epicTleStatusByStatus;
    }

    public void setEpicTleStatusByStatus(EpicTleStatus epicTleStatusByStatus) {
        this.epicTleStatusByStatus = epicTleStatusByStatus;
    }

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "SWIPE_TRANS_STATUS", nullable = false)
    public EpicTleStatus getEpicTleStatusBySwipeTransStatus() {
        return this.epicTleStatusBySwipeTransStatus;
    }

    public void setEpicTleStatusBySwipeTransStatus(EpicTleStatus epicTleStatusBySwipeTransStatus) {
        this.epicTleStatusBySwipeTransStatus = epicTleStatusBySwipeTransStatus;
    }

    @Column(name = "NAME", unique = true, nullable = false, length = 50)
    public String getName() {
        return this.name;
    }

    public void setName(String name) {
        this.name = name;
    }

    @Column(name = "MIN_AMOUNT", nullable = false)
    public int getMinAmount() {
        return this.minAmount;
    }

    public void setMinAmount(int minAmount) {
        this.minAmount = minAmount;
    }

    @Column(name = "MAX_AMOUNT", nullable = false)
    public int getMaxAmount() {
        return this.maxAmount;
    }

    public void setMaxAmount(int maxAmount) {
        this.maxAmount = maxAmount;
    }

    @Column(name = "OPR_HOURS_TO", nullable = false)
    public int getOprHoursTo() {
        return this.oprHoursTo;
    }

    public void setOprHoursTo(int oprHoursTo) {
        this.oprHoursTo = oprHoursTo;
    }

    @Column(name = "OPR_HOURS_FROM", nullable = false)
    public int getOprHoursFrom() {
        return this.oprHoursFrom;
    }

    public void setOprHoursFrom(int oprHoursFrom) {
        this.oprHoursFrom = oprHoursFrom;
    }

    @OneToMany(fetch = FetchType.LAZY, mappedBy = "epicTleTerminalRefprofile")
    public Set<EpicTleTerminal> getEpicTleTerminals() {
        return this.epicTleTerminals;
    }

    public void setEpicTleTerminals(Set<EpicTleTerminal> epicTleTerminals) {
        this.epicTleTerminals = epicTleTerminals;
    }

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "NFC_TXN_STATUS")
    public EpicTleStatus getEpicTleStatusByNfcTxnStatus() {
        return epicTleStatusByNfcTxnStatus;
    }

    public void setEpicTleStatusByNfcTxnStatus(EpicTleStatus epicTleStatusByNfcTxnStatus) {
        this.epicTleStatusByNfcTxnStatus = epicTleStatusByNfcTxnStatus;
    }

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "PIN_TXN_STATUS")
    public EpicTleStatus getEpicTleStatusByPinTxnStatus() {
        return epicTleStatusByPinTxnStatus;
    }

    public void setEpicTleStatusByPinTxnStatus(EpicTleStatus epicTleStatusByPinTxnStatus) {
        this.epicTleStatusByPinTxnStatus = epicTleStatusByPinTxnStatus;
    }

    @Override
    public String toString() {
        String trminl = "";
        try {
        if (epicTleTerminals != null) {
            for (EpicTleTerminal terminal : epicTleTerminals) {
                trminl += terminal.getTid() + " | ";
            }            
            trminl=trminl.substring(0,trminl.length()-2);
        }
                }
        catch (Exception e) {
        }
        try {
            return "{" + "id: " + id + ", timestamp: " + timestamp + ", fall back status :" + epicTleStatusByFallBackStatus.getCode() + ", status : " + epicTleStatusByStatus.getCode() + ", Swipe Transaction Status : " + epicTleStatusBySwipeTransStatus.getCode() + ", NFC Transaction Status : " + epicTleStatusByNfcTxnStatus.getCode() + ", Pin Transaction Status :" + epicTleStatusByPinTxnStatus.getCode() + ", name:" + name + ", minAmount:" + minAmount + ", maxAmount:" + maxAmount + ", Operation Hours To: " + oprHoursTo + ", Operation Hours From:" + oprHoursFrom + ", Terminals : " + trminl + '}';
        } catch (Exception e) {
            return "{" + "id: " + id + ", timestamp: " + timestamp + ", name: " + name + ", minAmount: " + minAmount + ", maxAmount: " + maxAmount + ", operation hours to : " + oprHoursTo + ", Operation Hours From:" + oprHoursFrom + ", terminals : " + trminl + '}';
        }
    }

    public String forHistory() {
        String trminl = "" ;
        if (epicTleTerminals != null) {
            for (EpicTleTerminal terminal : epicTleTerminals) {
                trminl += terminal.getTid() + " |";
            }
            trminl=trminl.substring(0,trminl.length()-1);
        }
        try {
            return "{" + "id: " + id + ", timestamp: " + timestamp + ", fall back status :" + epicTleStatusByFallBackStatus.getCode() + ", status : " + epicTleStatusByStatus.getCode() + ", Swipe Transaction Status : " + epicTleStatusBySwipeTransStatus.getCode() + ", NFC Transaction Status : " + epicTleStatusByNfcTxnStatus.getCode() + ", Pin Transaction Status :" + epicTleStatusByPinTxnStatus.getCode() + ", name:" + name + ", minAmount:" + minAmount + ", maxAmount:" + maxAmount + ", Operation Hours To: " + oprHoursTo + ", Operation Hours From:" + oprHoursFrom + ", Terminals : " + trminl + '}';
        } catch (Exception e) {
            return "{" + "id: " + id + ", timestamp: " + timestamp + ", name: " + name + ", minAmount: " + minAmount + ", maxAmount: " + maxAmount + ", operation hours to : " + oprHoursTo + ", Operation Hours From:" + oprHoursFrom + ", terminals : " + trminl + '}';
        }
    }

}
